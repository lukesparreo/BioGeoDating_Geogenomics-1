### General setup ###
conda activate msprime-env

python

#importing packages
import msprime
import demesdraw
import matplotlib.pyplot as plt

### Preferred method (coalescence) ###
#set conditions for mock data, with split occuring 3mya
N_ancestral = 100 #after 100,000 is when it starts getting computationally challenging
N_population = 50
T_divergence = 3000000 
migration_rate = 0.01

#define the changes to demographic size from event
demography = msprime.Demography()
demography.add_population(name="ancestral", initial_size=N_ancestral)
demography.add_population(name="pop1", initial_size=N_population)
demography.add_population(name="pop2", initial_size=N_population)

#define time of split
demography.add_population_split(time=T_divergence, derived=["pop1", "pop2"], ancestral="ancestral")

#define rate of migration before barrier and set migration after split to 0
demography.set_migration_rate(source="pop1", dest="pop2", rate=migration_rate)
demography.set_migration_rate(source="pop2", dest="pop1", rate=migration_rate)
demography.add_migration_rate_change(time=T_divergence, rate=0)

#tree sequence, with recombination occuring at angiosperm levels and about 1 million base pairs
ts = msprime.sim_ancestry(samples={"pop1": 50, "pop2": 50}, demography=demography, sequence_length=1e6, recombination_rate=1e-8)

#drawing demographic model
fig, ax = plt.subplots(figsize=(6,4))
demesdraw.tubes(demography.to_demes(), ax=ax)
plt.show()

#next we want to visualize the divergence times, and we will use the package numpy
import numpy as np

#displaying divergence times in the tree
tree = ts.first()
divergence_times = [tree.time(root) for root in tree.roots]
print(f"Average divergence time: {sum(divergence_times) / len(divergence_times)} generations")
#example result: Average divergence time: 24206.269771625153 generations
#we could adjust for generation time here where T_generations = T_divergence / [number of years in genereation]. But because Podostemaceae are annuals we will keep it as is.

#add genetic mutations to the simulation:
ts = msprime.sim_mutations(ts, rate=1e-8, model="jc69")

#can visualize in R using ape after converting to Newick
tree = ts.first().as_newick()
print(tree)  # Save this to a .nwk file for R visualization
#example output:(n35:24206.26977162515322561,((((n1:1747.17487722995929289,n11:1747.17487722995929289):1784.67548239071447824,(n37:3333.91009756288076460,(n30:2860.58003287847259344,(n27:84.26069782039162703,(n20:9.32172478325858478,n28:9.32172478325858478):74.93897303713303870):2776.31933505808092377):473.33006468440817116):197.94026205779300653):4043.94149527148420020,((((n5:758.35716124985265196,(n0:630.78154988015580784,n24:630.78154988015580784):127.57561136969684412):1637.74335100291227718,((n2:1212.69979167335986858,(n23:426.86641194946463429,(n6:377.84422403944779489,n36:377.84422403944779489):49.02218791001683940):785.83337972389517745):761.83259450951049985,(n8:1893.36621481599991057,((n4:648.92395946855424427,n13:648.92395946855424427):1080.59978991048319585,(n18:1207.81057522085438904,n31:1207.81057522085438904):521.71317415818293739):163.84246543696258414):81.16617136687045786):421.56812606989456071):814.47053612142553902,(n25:2636.73758443514179817,n33:2636.73758443514179817):573.83346393904867000):4346.40936841539223678,(n17:6685.62842663194078341,(((n10:168.65596364719797862,n34:168.65596364719797862):313.56828530323559789,(n7:476.42197411588108480,(n22:22.66392088652874648,n38:22.66392088652874648):453.75805322935235608):5.80227483455246329):3925.03141857066020748,(n26:1142.73275558023783560,n29:1142.73275558023783560):3264.52291194085591997):2278.37275911084725522):871.35199015764192154):18.81143810257526638):3669.61640954143240378,((n15:2121.25307789046973994,(n32:1309.88246569531270325,(n14:122.30097986565827739,n16:122.30097986565827739):1187.58148582965441165):811.37061219515703669):7653.61698626454563055,(n19:5078.63314269659440470,((n21:907.28540129224711563,n39:907.28540129224711563):526.47129078755438059,(n12:1347.07242460245402071,(n3:904.50051952020169210,n9:904.50051952020169210):442.57190508225232861):86.68426747734747551):3644.87645061679268110):4696.23692145842051104):1470.53820027857545938):12960.86150719156285049);
#code in r: library(ape)
#tree<-ape::read.tree(text= "add_newick_here")
#plot(tree)

### Additional method ### working on still, the tree has no branch lenghts?
import numpy as np
import dendropy

#create simulation with specifications
def simulate_barrier_phylogeny(num_species=30, divergence_time=3000000, barrier_effect=0.5):
   tree = dendropy.Tree()
   root = tree.seed_node
   for i in range(num_species):
      new_node = root.new_child(taxon=dendropy.Taxon(label=f"Species_{i+1}"))
   for node in tree.leaf_nodes():
      if np.random.rand() < barrier_effect:
         new_child = node.new_child(taxon=dendropy.Taxon(label=f"{node.taxon.label}_Diverged"))
         new_child.edge.length = divergence_time
   return tree

#simulate tree
simulated_tree = simulate_barrier_phylogeny(num_species=30, divergence_time=3000000, barrier_effect=0.7)

#view tree after converting to Newick
tree_newick = simulated_tree.as_string(schema="newick")
print(tree_newick)

