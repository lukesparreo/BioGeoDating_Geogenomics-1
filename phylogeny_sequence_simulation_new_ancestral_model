###Phylogeny simulation plus sequence generation (generates for n=60, select 1 randomly from each population):
###Still working on refining

# general setup
# conda activate msprime-env
# python
import msprime
import matplotlib.pyplot as plt
import demesdraw
import random

# Define the demographic model
demography = msprime.Demography()
demography.add_population(name="A", initial_size=50)
demography.add_population(name="B", initial_size=50)
demography.add_population(name="C", initial_size=100)
demography.add_population(name="AB", initial_size=100)
demography.add_population(name="ABC", initial_size=200)
demography.add_population_split(time=1000000, derived=["A", "B"], ancestral="AB")
demography.add_population_split(time=3000000, derived=["AB", "C"], ancestral="ABC")

# Simulate tree sequence
ts = msprime.sim_ancestry(samples={"A": 10, "B": 10, "C": 10}, 
                          demography=demography, 
                          sequence_length=10000,  #Adjust to a higher length if computationally feasbile in later steps
                          recombination_rate=4.8e-8)

# Define the mutation rate and HKY model parameters
mutation_rate = 1e-8
kappa = 2.0  # Transition/transversion ratio for HKY model
equilibrium_frequencies = [0.25, 0.25, 0.25, 0.25]  #A, C, G, T frequencies

# Apply HKY mutations to the tree sequence
ts = msprime.sim_mutations(
    ts,
    rate=mutation_rate,
    model=msprime.HKY(kappa=kappa, equilibrium_frequencies=equilibrium_frequencies)
)

# Function to get MRCA for each population
def get_population_mrca(ts, pop_name):
    pop_id = next((i.id for i in ts.populations() if i.metadata["name"] == pop_name), None)
    if pop_id is None:
        raise ValueError(f"Population {pop_name} not found in tree sequence.")
    sample_nodes = [n for n in ts.samples() if ts.node(n).population == pop_id]
    if len(sample_nodes) < 2:
        raise ValueError(f"Not enough samples for population {pop_name} to compute MRCA.")
    return ts.first().mrca(*sample_nodes)

# Get MRCA nodes for A, B, and C
pop_mrcas = {}
for pop in ["A", "B", "C"]:
    try:
        pop_mrcas[pop] = get_population_mrca(ts, pop)
    except ValueError as e:
        print(e)

# Compute MRCA for AB and ABC
tree = ts.first()
try:
    pop_mrcas["AB"] = tree.mrca(pop_mrcas["A"], pop_mrcas["B"])
    pop_mrcas["ABC"] = tree.mrca(pop_mrcas["AB"], pop_mrcas["C"])
except KeyError as e:
    print(f"Error computing MRCA: {e}")

print("Population MRCAs:", pop_mrcas)

# Extract divergence times for populations
divergence_times = {pop: ts.node(mrca).time for pop, mrca in pop_mrcas.items()}
print("Divergence times:", divergence_times)

# Get population-level Newick tree
pop_newick = tree.as_newick(root=pop_mrcas["ABC"])
print("Population-Level Newick Tree:", pop_newick)

# Simplify the tree sequence
simplified_ts = ts.simplify(samples=[pop_mrcas["A"], pop_mrcas["B"], pop_mrcas["C"]], keep_input_roots=True)

# Draw demographic model
fig, ax = plt.subplots(figsize=(6, 4))
demesdraw.tubes(demography.to_demes(), ax=ax)
plt.show()

print("Simulated sequence data has been written to:")
print("- Full dataset: 'simulated_sequences.nex'")
print("- Single-individual dataset: 'simulated_sequences_single.nex'")

### ANCESTRAL SEQUENCE FILLING STARTS HERE ###

# Define nucleotides
nucleotides = ['A', 'C', 'G', 'T']

# Generate ancestral sequence
ancestral_sequence = ''.join(random.choices(nucleotides, k=int(sequence_length)))

# Function to get mutated sequences
def get_sequences(ts, ancestral_sequence):
    sequences = {}
    for variant in ts.variants():
        for i, allele in enumerate(variant.alleles):
            for j in variant.genotypes:
                if j not in sequences:
                    sequences[j] = list(ancestral_sequence)
                if allele != ancestral_sequence[variant.site.position]:
                    sequences[j][int(variant.site.position)] = allele
    # Join the lists into strings
    sequences = {key: ''.join(seq) for key, seq in sequences.items()}
    return sequences

# Get the full sequences
full_sequences = get_sequences(ts, ancestral_sequence)

# Write the sequences in FASTA format
with open("simulated_sequences.fasta", "w") as fasta_file:
    for sample, sequence in full_sequences.items():
        fasta_file.write(f">Sample_{sample}\n{sequence}\n")

print("Full simulated sequences written to 'simulated_sequences.fasta'")
